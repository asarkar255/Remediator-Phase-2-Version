Rule 1: General Remediation Instructions for ABAP Code

Description:
- Review and apply every rule with the highest priority.
- Only return the remediated (corrected) ABAP code; do not return original/incorrect code without comments.
- Prioritize LLM's knowledge of ECC and S/4 HANA ABAP standards above all.
- Always comment out the original (non-S/4 HANA compliant) ABAP code.
- This approach applies universally to all statements and codes that require remediation.
- The remediated (corrected) code must be inserted immediately after the commented-out incorrect code.
- Always include the Rule Number after the comment tags '"Commented By PwA' and '"Added By PwA'.

Example:

Input (Original Code):
DATA: BEGIN OF itab OCCURS 0 WITH HEADER LINE,
        matnr TYPE matnr,
        vbeln TYPE vbeln_d,
      END OF itab.

Output (Remediated Code):
*DATA: BEGIN OF itab OCCURS 0 WITH HEADER LINE,   "Commented By PwA Rule X
*        matnr TYPE matnr,
*        vbeln TYPE vbeln_d,
*END OF itab.

TYPES: BEGIN OF ty_itab,                          "Added By PwA Rule X
         matnr TYPE matnr,
         vbeln TYPE vbeln_d,
       END OF ty_itab.

Summary Table:

| Scenario | Action |
|:---------|:-------|
| Encounter legacy ABAP code incompatible with S/4 HANA | Comment the old code and add the remediated code immediately after |
| Tagging | Always mention Rule Number in comments |

Rule 2: Replace DATA Declaration with OCCURS 0 and HEADER LINE Using TYPES and Separate Work Area

Description:
- If a DATA declaration uses "BEGIN OF XXXX OCCURS 0 WITH HEADER LINE", replace it with:
  - A TYPES structure for the line type.
  - An internal table declaration using STANDARD/HASHED/INDEXED table without HEADER LINE.
  - A separate work area declaration of the same TYPE.
- Ensure transformation to modern ABAP standards for S/4 HANA compatibility.
- Always comment out the original code and add the remediated version just after it.
- Always include the Rule Number in the comments.

Example 1:

Input:
DATA: BEGIN OF itab OCCURS 0 WITH HEADER LINE,
        matnr TYPE matnr,
        vbeln TYPE vbeln_d,
      END OF itab.

Output:
*DATA: BEGIN OF itab OCCURS 0 WITH HEADER LINE,   "Commented By PwA  Rule 2
*        matnr TYPE matnr,
*        vbeln TYPE vbeln_d,
*END OF itab.

TYPES: BEGIN OF ty_itab,                            "Added By PwA  Rule 2
         matnr TYPE matnr,
         vbeln TYPE vbeln_d,
       END OF ty_itab.

DATA: gt_itab TYPE STANDARD TABLE OF ty_itab.       "Added By PwA  Rule 2
DATA: gs_itab TYPE ty_itab.                         "Added By PwA  Rule 2

Example 2:

Input:
DATA: BEGIN OF xmard OCCURS 0.
        INCLUDE STRUCTURE mard.
DATA: END OF xmard.

Output:
*DATA: BEGIN OF xmard OCCURS 0.                "Commented By PwA  Rule 2
*        INCLUDE STRUCTURE mard.
*DATA: END OF xmard.

TYPES: BEGIN OF ty_xmard.                        "Added By PwA  Rule 2
        INCLUDE STRUCTURE mard.
TYPES: END OF ty_xmard.
DATA: gt_xmard TYPE STANDARD TABLE OF ty_xmard.  "Added By PwA  Rule 2
DATA: gs_xmard TYPE ty_xmard.                    "Added By PwA  Rule 2

Example 3:

Input:
DATA: BEGIN OF xfinal OCCURS 0,
       bukrs LIKE t001-bukrs,
       belnr LIKE bseg-belnr,
       gjahr LIKE bseg-gjahr,
       buzei LIKE bseg-buzei,
      END OF xfinal.

Output:
*DATA: BEGIN OF xfinal OCCURS 0,   "Commented By PwA  Rule 2
*       bukrs LIKE t001-bukrs,
*       belnr LIKE bseg-belnr,
*       gjahr LIKE bseg-gjahr,
*       buzei LIKE bseg-buzei,
*      END OF xfinal.

TYPES: BEGIN OF ty_xfinal,    "Added By PwA  Rule 2
       bukrs TYPE bukrs,
       belnr TYPE belnr_d,
       gjahr TYPE gjahr,
       buzei TYPE buzei,
      END OF ty_xfinal.

DATA: gt_xfinal TYPE STANDARD TABLE OF ty_xfinal.  "Added By PwA  Rule 2
DATA: gs_xfinal TYPE ty_xfinal.                    "Added By PwA  Rule 2

Example 4:

Input:
DATA ifinal TYPE STANDARD TABLE OF ty_final WITH HEADER LINE.

Output:
*DATA ifinal TYPE STANDARD TABLE OF ty_final WITH HEADER LINE.  "Commented By PwA  Rule 2
DATA: gt_xfinal TYPE STANDARD TABLE OF ty_final.  "Added By PwA  Rule 2
DATA: gs_xfinal TYPE ty_final.                    "Added By PwA  Rule 2

Example 5:

Input:
DATA ifinal TYPE HASHED TABLE OF ty_final INITIAL SIZE 0 WITH HEADER LINE
WITH UNIQUE KEY BUKRS BELNR.

Output:
*DATA ifinal TYPE HASHED TABLE OF ty_final INITIAL SIZE 0 WITH HEADER LINE
WITH UNIQUE KEY BUKRS BELNR.  "Commented By PwA  Rule 2
DATA: gt_xfinal TYPE HASHED TABLE OF ty_final WITH UNIQUE KEY BUKRS BELNR.  "Added By PwA  Rule 2
DATA: gs_xfinal TYPE ty_final.                    "Added By PwA  Rule 2

Summary Table:

| Scenario | Action |
|:---------|:-------|
| DATA declared with OCCURS 0 and HEADER LINE | Replace with TYPES, separate internal table, and work area |
| Type of Table | Preserve original type (STANDARD, HASHED, etc.) while removing HEADER LINE |
| Tagging | Always mention Rule Number in comments |

Rule 3: Replace SELECT * with Explicit Field Selection

Description:
- If SELECT * is found in the input ABAP code:
  - Identify all fields required from the database table.
  - Explicitly list the necessary fields in the SELECT statement instead of using '*'.
  - Use internal tables and work areas declared as per Rule 2.
  - Always escape internal table and WHERE clause variables using '@' for S/4 HANA compatibility.
- Comment out the original SELECT * code.
- Add remediated code with explicit fields and modern syntax.

Example 1:

Input:
Select *
  FROM bseg 
  INTO TABLE ibseg[]
  WHERE belnr IN s_belnr[].

Output:
*Select *                     "Commented By PwA  Rule 3
*  FROM bseg 
*  INTO TABLE ibseg[]
*  WHERE belnr IN s_belnr[].

Select bukrs, belnr, koart 
  FROM bseg
  INTO CORRESPONDING FIELDS OF TABLE @gt_ibseg
  WHERE belnr IN @s_belnr.

Example 2:

Input:
Select *
  FROM bkpf 
  INTO TABLE ibkpf[]
  WHERE belnr IN s_belnr[].
IF ibkpf[] IS NOT INITIAL.
Select *
  FROM bseg 
  INTO TABLE ibseg[]
  FOR ALL ENTRIES IN ibkpf[]
  WHERE belnr IN s_belnr[].
ENDIF.

Output:
*Select *                       "Commented By PwA  Rule 3
*  FROM bkpf 
*  INTO TABLE ibkpf[]
*  WHERE belnr IN s_belnr[].
*IF ibkpf[] IS NOT INITIAL.
*Select *                        "Commented By PwA  Rule 3
*  FROM bseg 
*  INTO TABLE ibseg[]
*  FOR ALL ENTRIES IN ibkpf[]
*  WHERE belnr IN s_belnr[].
*ENDIF.

Select bukrs, belnr                                   "Added By PwA  Rule 3
  FROM bkpf
  INTO CORRESPONDING FIELDS OF TABLE @gt_ibkpf
  WHERE belnr IN @s_belnr[].
IF gt_ibkpf IS NOT INITIAL.
Select bukrs, belnr, koart                              "Added By PwA  Rule 3
  FROM bseg
  INTO CORRESPONDING FIELDS OF TABLE @gt_ibseg
  WHERE belnr IN @s_belnr.
ENDIF.

Summary Table:

| Scenario | Action |
|:---------|:-------|
| SELECT * found in ABAP Code | Replace with explicit fields |
| Table & Work Area Usage | Use internal tables and work areas as per Rule 2 |
| Escaping Variables | Always escape with '@' |
| Commenting | Comment old SELECT * and add remediated version immediately after |

Rule 4: Replace MOVE Statement with '=' Assignment Operator

Description:
- If a MOVE statement is found in the ABAP code:
  - Always replace it with direct assignment using the '=' operator.
- Comment out the original MOVE statement.
- Add the remediated assignment immediately after the commented line.
- Ensure the 'Commented By PwA' and 'Added By PwA' tags are appended with the appropriate Rule Number.

Example 1:

Input:
MOVE ls_mara-matnr TO ls_lips-matnr.

Output:
*MOVE ls_mara-matnr TO ls_lips-matnr.   "Commented By PwA  Rule 4
ls_lips-matnr = ls_mara-matnr.          "Added By PwA  Rule 4

Example 2:

Input:
MOVE 'K - Consignment vendor' TO text004.

Output:
*MOVE 'K - Consignment vendor' TO text004.  "Commented By PwA  Rule 4
text004 = 'K - Consignment vendor'.         "Added By PwA  Rule 4

Summary Table:

| Scenario | Action |
|:---------|:-------|
| MOVE statement used | Replace with direct '=' assignment |
| Commenting | Always comment old MOVE statement and add new '=' assignment just after |
| Tagging | Always mention Rule Number in comments |

Rule 5: Replace REFRESH Statement with CLEAR Statement

Description:
- If a REFRESH statement is found in the ABAP code:
  - Always replace it with a CLEAR statement.
  - REFRESH is outdated for internal tables and is fully replaced by CLEAR in modern ABAP (especially for S/4HANA).
- Comment out the original REFRESH statement.
- Add the remediated CLEAR statement immediately after the commented line.
- Use 'Commented By PwA' and 'Added By PwA' tags with the appropriate Rule Number.

Example 1:

Input:
REFRESH lt_mara.

Output:
*REFRESH lt_mara.          "Commented By PwA  Rule 5
CLEAR lt_mara.             "Added By PwA  Rule 5

Example 2:

Input:
REFRESH: it_bseg, it_bkpf.

Output:
*REFRESH: it_bseg, it_bkpf. "Commented By PwA  Rule 5
CLEAR it_bseg.              "Added By PwA  Rule 5
CLEAR it_bkpf.              "Added By PwA  Rule 5

Summary Table:

| Scenario | Action |
|:---------|:-------|
| REFRESH statement found | Replace with CLEAR statement |
| Commenting | Always comment old REFRESH and add new CLEAR statement just after |
| Tagging | Always mention Rule Number in comments |

Rule 6: Replace PARAMETERS with LIKE by PARAMETERS with TYPE using Data Element

Description:
- If a PARAMETERS statement uses LIKE to refer to a table-field (e.g., lips-vbeln):
  - Search for the referenced table and field to find its Data Element.
  - Replace LIKE with TYPE using the exact Data Element.
- Comment out the original PARAMETERS statement.
- Add the corrected PARAMETERS statement immediately after the commented line.
- Use 'Commented By PwA' and 'Added By PwA' tags with the appropriate Rule Number.

Example 1:

Input:
PARAMETERS: p_vbeln LIKE lips-vbeln.

Output:
*PARAMETERS: p_vbeln LIKE lips-vbeln. "Commented By PwA  Rule 6
PARAMETERS: p_vbeln TYPE vbeln_vl.    "Added By PwA  Rule 6

Example 2:

Input:
PARAMETERS: p_matnr LIKE mara-matnr.

Output:
*PARAMETERS: p_matnr LIKE mara-matnr. "Commented By PwA  Rule 6
PARAMETERS: p_matnr TYPE matnr.       "Added By PwA  Rule 6

Summary Table:

| Scenario | Action |
|:---------|:-------|
| PARAMETERS using LIKE | Replace LIKE with TYPE and use correct Data Element |
| Commenting | Always comment old PARAMETERS statement and add remediated TYPE version just after |
| Tagging | Always mention Rule Number in comments |

Rule 7A: Replace TABLES Statement with Work Area Declarations

Description:
- If a TABLES statement is found in the ABAP code:
  - Replace each TABLES entry with a DATA statement that declares a work area of the same TYPE as the table.
- Comment out the original TABLES statement.
- Add a separate DATA work area declaration for each table.
- Always use 'Commented By PwA' and 'Added By PwA' tags with the Rule Number.

Example 1:

Input:
TABLES: lips, mara.

Output:
*TABLES: lips, mara.                   "Commented By PwA  Rule 7A
DATA gs_lips TYPE lips.                "Added By PwA  Rule 7A
DATA gs_mara TYPE mara.                "Added By PwA  Rule 7A

Example 2:

Input:
TABLES: ekko.

Output:
*TABLES: ekko.                         "Commented By PwA  Rule 7A
DATA gs_ekko TYPE ekko.                "Added By PwA  Rule 7A

Summary Table:

| Scenario | Action |
|:---------|:-------|
| TABLES statement found | Replace each with a DATA work area TYPE of that table |
| Naming Convention | Prefix work area names with 'gs_' |
| Commenting | Comment old TABLES statement and add corresponding DATA declarations immediately after |
| Tagging | Always mention Rule Number in comments |

Rule 7B: Adjust SELECT-OPTIONS to Use Work Area Field Instead of Table Field

Description:
- This rule is a continuation of Rule 7A.
- If a SELECT-OPTIONS statement is found that directly references a table-field (e.g., mara-matnr):
  - Replace the reference with the work area declared from Rule 7A (e.g., gs_mara-matnr).
- Comment out the original SELECT-OPTIONS statement.
- Add the corrected SELECT-OPTIONS statement immediately after the commented line.
- Use 'Commented By PwA' and 'Added By PwA' tags with the Rule Number.

Example 1:

Input:
SELECT-OPTIONS: X_matnr FOR mara-matnr.

Output:
*SELECT-OPTIONS: X_matnr FOR mara-matnr.   "Commented By PwA  Rule 7B
SELECT-OPTIONS: X_matnr FOR gs_mara-matnr. "Added By PwA  Rule 7B

Example 2:

Input:
SELECT-OPTIONS: X_bukrs FOR t001-bukrs.

Output:
*SELECT-OPTIONS: X_bukrs FOR t001-bukrs.   "Commented By PwA  Rule 7B
SELECT-OPTIONS: X_bukrs FOR gs_t001-bukrs. "Added By PwA  Rule 7B

Summary Table:

| Scenario | Action |
|:---------|:-------|
| SELECT-OPTIONS referencing table field | Replace reference with work area field (gs_<table>-<field>) |
| Commenting | Comment old SELECT-OPTIONS statement and add remediated version immediately after |
| Tagging | Always mention Rule Number in comments |

Rule 7C: Transform DATA Declarations Referencing TABLES to Use Data Elements

Description:
- After applying Rule 7A (replacing TABLES with work areas):
  - If DATA variables are declared with TYPE referencing a table-field (e.g., mara-ersda, lips-vbeln),
  - Replace the TYPE with the correct Data Element of that table-field.
- Comment out both the original TABLES and such DATA statements.
- Add corrected DATA declarations using appropriate Data Elements.
- Always use 'Commented By PwA' and 'Added By PwA' tags with the Rule Number.

Example 1:

Input:
TABLES: lips, mara.
DATA lv_ersda TYPE mara-ersda.
DATA lv_vbeln TYPE lips-vbeln.

Output:
*TABLES: lips, mara.               "Commented By PwA  Rule 7C
*DATA lv_ersda TYPE mara-ersda.     "Commented By PwA  Rule 7C
*DATA lv_vbeln TYPE lips-vbeln.     "Commented By PwA  Rule 7C

DATA lv_ersda TYPE ersda.           "Added By PwA  Rule 7C
DATA lv_vbeln TYPE vbeln_vl.         "Added By PwA  Rule 7C

Example 2:

Input:
TABLES: ekko.
DATA lv_bukrs TYPE ekko-bukrs.

Output:
*TABLES: ekko.                      "Commented By PwA  Rule 7C
*DATA lv_bukrs TYPE ekko-bukrs.      "Commented By PwA  Rule 7C

DATA lv_bukrs TYPE bukrs.            "Added By PwA  Rule 7C

Summary Table:

| Scenario | Action |
|:---------|:-------|
| DATA declaration referencing a table-field (after TABLES removal) | Replace TYPE with the table-field's Data Element |
| Commenting | Always comment old TABLES and DATA and add corrected DATA immediately after |
| Tagging | Always mention Rule Number in comments |

Rule 8: Replace LIKE with TYPE and Use Correct Data Element or Reference Structure

Description:
- If a DATA variable is declared using LIKE:
  - Replace LIKE with TYPE.
  - Search the referenced table-field or structure to find the correct Data Element or Structure name.
- Comment out the original LIKE-based declaration.
- Add the corrected TYPE-based declaration immediately after.
- Always use 'Commented By PwA' and 'Added By PwA' tags with the Rule Number.

Example 1:

Input:
DATA ls_mara LIKE mara.

Output:
*DATA ls_mara LIKE mara. "Commented By PwA  Rule 8
DATA ls_mara TYPE mara.  "Added By PwA  Rule 8

Example 2:

Input:
DATA lv_vbeln LIKE lips-vbeln.

Output:
*DATA lv_vbeln LIKE lips-vbeln. "Commented By PwA  Rule 8
DATA lv_vbeln TYPE vbeln_vl.    "Added By PwA  Rule 8

Example 3:

Input:
DATA ls_bseg TYPE BSEG.
DATA ls_doc LIKE ls_bseg.

Output:
DATA ls_bseg TYPE BSEG.
*DATA ls_doc LIKE ls_bseg.       "Commented By PwA  Rule 8
DATA ls_doc TYPE BSEG.           "Added By PwA  Rule 8

Summary Table:

| Scenario | Action |
|:---------|:-------|
| Variable declared using LIKE | Replace LIKE with TYPE and use correct Data Element/Structure |
| Commenting | Always comment old LIKE declaration and add new TYPE declaration |
| Tagging | Always mention Rule Number in comments |


Rule 9: Replace MOVE-CORRESPONDING with CORRESPONDING #( )

Description:
- If a MOVE-CORRESPONDING statement is found:
  - Replace it with the modern ABAP expression CORRESPONDING #( source_structure ).
- Comment out the original MOVE-CORRESPONDING statement.
- Add the remediated CORRESPONDING #( ) assignment immediately after.
- Always use 'Commented By PwA' and 'Added By PwA' tags with the Rule Number.

Example 1:

Input:
DATA ls_bkpf TYPE BKPF,
     ls_bseg TYPE BSEG.

MOVE-CORRESPONDING ls_bkpf TO ls_bseg.

Output:
DATA ls_bkpf TYPE BKPF,
     ls_bseg TYPE BSEG.

*MOVE-CORRESPONDING ls_bkpf TO ls_bseg.  "Commented By PwA  Rule 9
ls_bseg = CORRESPONDING #( ls_bkpf ).    "Added By PwA  Rule 9

Example 2:

Input:
MOVE-CORRESPONDING gs_vbak TO gs_vbap.

Output:
*MOVE-CORRESPONDING gs_vbak TO gs_vbap.  "Commented By PwA  Rule 9
gs_vbap = CORRESPONDING #( gs_vbak ).    "Added By PwA  Rule 9

Summary Table:

| Scenario | Action |
|:---------|:-------|
| MOVE-CORRESPONDING statement found | Replace with CORRESPONDING #( source_structure ) |
| Commenting | Always comment old MOVE-CORRESPONDING and add corrected CORRESPONDING #( ) |
| Tagging | Always mention Rule Number in comments |

Rule 10: Replace DESCRIBE TABLE with lines( ) Expression

Description:
- If a DESCRIBE TABLE statement is found:
  - Replace it with the modern ABAP expression: lines( <internal_table> ).
- Comment out the original DESCRIBE TABLE statement.
- Add the remediated assignment using lines( ) immediately after.
- Always use 'Commented By PwA' and 'Added By PwA' tags with the Rule Number.

Example 1:

Input:
DATA: lt_mara TYPE STANDARD TABLE OF mara,
      lv_line TYPE i.

DESCRIBE TABLE lt_mara LINES lv_line.

Output:
DATA: lt_mara TYPE STANDARD TABLE OF mara,
      lv_line TYPE i.

*DESCRIBE TABLE lt_mara LINES lv_line.  "Commented By PwA  Rule 10
lv_line = lines( lt_mara ).             "Added By PwA  Rule 10

Example 2:

Input:
DESCRIBE TABLE lt_final LINES lv_count.

Output:
*DESCRIBE TABLE lt_final LINES lv_count.  "Commented By PwA  Rule 10
lv_count = lines( lt_final ).             "Added By PwA  Rule 10

Summary Table:

| Scenario | Action |
|:---------|:-------|
| DESCRIBE TABLE found | Replace with assignment using lines( ) |
| Commenting | Always comment old DESCRIBE TABLE and add lines( ) assignment |
| Tagging | Always mention Rule Number in comments |


Rule 11: Replace Table KONV with V_KONV in Selections

Description:
- If the database table KONV is used in a SELECT statement:
  - Always replace KONV with V_KONV.
- Comment out the original SELECT statement referencing KONV.
- Add the remediated SELECT statement using V_KONV.
- Always use 'Commented By PwA' and 'Added By PwA' tags with the Rule Number.

Example 1:

Input:
SELECT knumv,
       kposn
  FROM KONV 
  INTO TABLE ...

Output:
*SELECT knumv,   "Commented By PwA  Rule 11
*       kposn
*  FROM KONV 
*  INTO TABLE ...

SELECT knumv,
       kposn
  FROM V_KONV    "Added By PwA  Rule 11
  INTO TABLE ...

Example 2:

Input:
SELECT * FROM KONV INTO TABLE lt_konv WHERE knumv = '1000'.

Output:
*SELECT * FROM KONV INTO TABLE lt_konv WHERE knumv = '1000'.   "Commented By PwA  Rule 11
SELECT * FROM V_KONV INTO TABLE lt_konv WHERE knumv = '1000'.   "Added By PwA  Rule 11

Summary Table:

| Scenario | Action |
|:---------|:-------|
| SELECT statement using KONV | Replace KONV with V_KONV |
| Commenting | Always comment old SELECT on KONV and add corrected SELECT on V_KONV |
| Tagging | Always mention Rule Number in comments |
     


Rule 12: Add ORDER BY or SORT After Database Selection

Description:
- After a database SELECT INTO TABLE, if no SORT is performed on the internal table, ensure the selected data is ordered.
- If the SELECT does NOT use FOR ALL ENTRIES, add an ORDER BY clause in the SELECT statement.
- If the SELECT uses FOR ALL ENTRIES, do NOT use ORDER BY. Instead, add a SORT statement on the internal table after data retrieval.

Example 1: No FOR ALL ENTRIES — Use ORDER BY

Input (Original Code):
SELECT knumv 
       kposn  
       stunr
       zahek
 FROM  KONV
 INTO TABLE lt_KONV 
 WHERE KNUMV IN S_KNUMV.
IF sy-subrc = 0.
ENDIF.

Output (Remediated Code):
*SELECT knumv     "Commented By PwA Rule 12
*      kposn  
*      stunr
*      zahek
*FROM  KONV
*INTO TABLE lt_KONV 
*WHERE KNUMV IN S_KNUMV.
*IF sy-subrc = 0.
*ENDIF.

SELECT knumv     
       kposn  
       stunr
       zahek
 FROM  V_KONV                          "Added By PwA Rule 12
 INTO TABLE lt_KONV 
 WHERE KNUMV IN S_KNUMV
 ORDER BY knumv kposn stunr zahek.      "Added By PwA Rule 12
IF sy-subrc = 0.
ENDIF.


Example 2: With FOR ALL ENTRIES — Use SORT

Input (Original Code):
SELECT knumv 
       kposn  
       stunr
       zahek
 FROM  KONV
 INTO TABLE lt_KONV 
 FOR ALL ENTRIES IN lt_final
 WHERE stunr = lt_final-stunr
   AND KNUMV IN S_KNUMV.
IF sy-subrc = 0.
ENDIF.

Output (Remediated Code):
*SELECT knumv                           "Commented By PwA Rule 12
*      kposn  
*      stunr
*      zahek
*FROM  KONV
*INTO TABLE lt_KONV 
*FOR ALL ENTRIES IN lt_final
*WHERE stunr = lt_final-stunr
*  AND KNUMV IN S_KNUMV.
*IF sy-subrc = 0.
*ENDIF.

SELECT knumv                               
       kposn  
       stunr
       zahek
 FROM  V_KONV                          "Added By PwA Rule 12
 INTO TABLE lt_KONV 
 FOR ALL ENTRIES IN lt_final
 WHERE stunr = lt_final-stunr
   AND KNUMV IN S_KNUMV.
IF sy-subrc = 0.
  SORT lt_KONV BY knumv kposn stunr zahek.    "Added By PwA Rule 12
ENDIF.


Summary Table:

| Scenario | Action |
|:---------|:-------|
| Simple SELECT without FOR ALL ENTRIES | Add ORDER BY fields in SELECT statement |
| SELECT with FOR ALL ENTRIES | After SELECT, add SORT on internal table |

Rule 13: Replace READ TABLE on Internal Tables with Header Line by Using Work Areas

Description:
- If an internal table with a HEADER LINE is used with a READ TABLE statement, it must be modernized.
- Create a proper TYPES structure and define an internal table and corresponding work area separately.
- Use the work area explicitly in the READ TABLE statement to avoid outdated header-line usage.

Example:

Input (Original Code):
DATA: BEGIN OF itab OCCURS 0,
        matnr TYPE matnr,
        werks TYPE werks_d,
      END OF itab.

READ TABLE itab WITH KEY matnr = '1000'.

Output (Remediated Code):
*TYPES: BEGIN OF ty_itab,                          "Commented By PwA Rule 13
*         matnr TYPE matnr,
*         werks TYPE werks_d,
*       END OF ty_itab.
*DATA: itab TYPE STANDARD TABLE OF ty_itab WITH DEFAULT KEY.
*DATA: wa_itab TYPE ty_itab.
*READ TABLE itab WITH KEY matnr = '1000'.

TYPES: BEGIN OF ty_itab,                            "Added By PwA Rule 13
         matnr TYPE matnr,
         werks TYPE werks_d,
       END OF ty_itab.
DATA: lt_itab TYPE STANDARD TABLE OF ty_itab WITH DEFAULT KEY,   "Added By PwA Rule 13
      wa_itab TYPE ty_itab.                                       "Added By PwA Rule 13

READ TABLE lt_itab INTO wa_itab WITH KEY matnr = '1000'.          "Added By PwA Rule 13

Summary Table:

| Scenario | Action |
|:---------|:-------|
| READ TABLE on internal table with header line | Create a TYPES structure, define internal table and work area separately, and use READ TABLE INTO work area |

Rule 14: ABAP Declarations Syntax and Formatting Rules

A. TYPES Declaration:
   - Always begin a TYPES block with "TYPES: BEGIN OF <type_name>,".
   - Each field must end with a comma ',' (except the last field).
   - End the block with "END OF <type_name>."
   - Always terminate the TYPES block with a period '.' after END OF.
   
   Example:
   TYPES: BEGIN OF ty_mara,
            matnr TYPE matnr,
            werks TYPE werks_d,
            lgort TYPE lgort_d,
          END OF ty_mara.

B. DATA Declaration:
   - For a structure or a single variable, declare as:
     "DATA <variable_name> TYPE <type_name>."
   - For internal tables, declare as:
     "DATA <table_name> TYPE STANDARD TABLE OF <type_name> WITH DEFAULT KEY."
   - End every DATA statement with a period '.'.

   Example (Single Field):
   DATA lv_matnr TYPE matnr.

   Example (Internal Table):
   DATA lt_mara TYPE STANDARD TABLE OF ty_mara WITH DEFAULT KEY.

   Example (Work Area):
   DATA ls_mara TYPE ty_mara.

C. Comma Usage:
   - Within a TYPES block, all field lines must end with a comma ','
     except the final field before END OF.
   - No comma ',' after END OF.

D. Period Usage:
   - Every ABAP statement must end with a period '.' (outside of TYPES field list).
   - Mandatory after END OF, DATA, and standalone executable statements.

E. Indentation and Formatting:
   - Begin TYPES declaration at standard indentation.
   - Indent fields inside TYPES block by 2 spaces or 1 tab.
   - Indent multi-line DATA declarations properly for better readability.

F. Naming Conventions (Best Practices):
   - Prefix local variables with 'lv_' (e.g., lv_matnr).
   - Prefix structures (single line) with 'ls_' (e.g., ls_mara).
   - Prefix internal tables with 'lt_' (e.g., lt_mara).
   - Prefix global variables with 'gv_' if needed.
   - Prefix constants with 'gc_'.
   - Prefix parameters with 'p_' or 's_' (for SELECT-OPTIONS).
   - Prefix work areas derived from TABLES with 'gs_'.

G. Additional Syntax Rules:
   - Never mix declarations and operations; keep them in separate blocks.
   - Always declare TYPES first, then DATA, then CONSTANTS (if any), before executable logic.
   - Prefer explicit type references (TYPE) over implicit ones (LIKE).

H. Standard Example:

TYPES: BEGIN OF ty_employee,
         empid TYPE empid,
         name TYPE name1,
         doj TYPE datum,
       END OF ty_employee.

DATA lt_employee TYPE STANDARD TABLE OF ty_employee WITH DEFAULT KEY.
DATA ls_employee TYPE ty_employee.
DATA lv_count TYPE i.

CLEAR lt_employee.
 Important Final Guidelines:
- Maintain proper commenting and sequence.
- Always mention Rule number.
- Ensure S/4HANA compatibility.